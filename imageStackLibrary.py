import numpy as np
from PIL import Image, ImageDraw
import os
import scipy.io
import matplotlib.pyplot as plt
import matplotlib.image as mpimg


def roiMask(x,y,width,height):
	"""Function to create a polygon mask for an image that is width x height pixels

	Input:
		-x, y are vectors containing points that define a polygon
		-width is the width of the resulting mask in pixels
		-height is the height of the resulting mask in pixels
	Output:
		Binary image with polygon filled with 1s, the rest of the image is 0s
	"""

	if(np.max(x)> width):
		print 'polygon is wider than image!'
		x[x>width] = width
		#return
	elif(np.max(y)>height):
		print 'polygon is taller than image!'
		y[y>height] = height
		#return

	poly = []

	for i in np.arange(len(x)):
		poly = poly + [x[i]] + [y[i]]
#	for i in np.arange(poly.size/2):
#		poly[2*i+1] = y[i]
	
	img = Image.new('L', (width, height),0)
	ImageDraw.Draw(img).polygon(poly, outline=1, fill=1)
	mask = np.array(img)

	return mask


def param2poly(filePath, fileName):
	"""Extract the polygon vertices from param.m (generated by multipleRegionCrop.m, RP lab)

	Input:
		-filePath: path to param.m file

	Output:
		-poly: n x 2 numpy array of x,y pairs that define a polygon within an image
		-imSize: image size

	"""

	os.chdir(filePath)
	param = scipy.io.loadmat(fileName)
	
	try:
		poly = param['param']['regionExtent'][0][0]['polyAll'][0][0][0][0]
	except (ValueError):
		poly_exists = False
	else:
		poly_exists = True
	imSize = param['param']['imSize'][0][0][0]
	if(not poly_exists):
		poly = np.array([0])
		
	return [poly, imSize]

def histOfStack(filePath,fileNameBase,mask):
	os.chdir(filePath)
	
	numIm = len([name for name in os.listdir('.') if (os.path.isfile(name) and ('.tif' in name))])
	allData = np.array([])
	for i in np.arange(numIm):
		fileName = "%s%u%s" % (fileNameBase,i,'.tif')
		im = mpimg.imread(fileName)
		newim = im*mask
		allData = np.append(allData,np.reshape(newim,(1,-1)))
		
	H = plt.hist(allData[allData!=0],100)
	return H


